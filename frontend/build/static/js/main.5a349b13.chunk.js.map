{"version":3,"sources":["Components/NavBox.js","Components/PostForm.js","actionTypes.js","actions.js","Containers/NewPost.js","Components/Comment.js","Components/CommentList.js","Components/CommentForm.js","Components/PostDetail.js","Containers/PostDetail.js","Components/Title.js","Containers/TitleList.js","Components/Routes.js","App.js","serviceWorker.js","Reducers/titleReducer.js","Reducers/rootReducer.js","Reducers/postReducer.js","index.js"],"names":["NavBox","className","style","marginRight","exact","to","React","Component","PostForm","props","state","isEditing","title","currentPost","description","body","id","votes","handleChange","bind","handleSubmit","handleEdit","handleCancel","evt","preventDefault","this","addPost","setState","target","name","value","cancel","updatePost","submit","Fragment","margin","onSubmit","htmlFor","type","placeholder","onChange","rows","onClick","ADDPOST","EDITPOST","REMOVEPOST","LOADTITLES","ADDCOMMENT","REMOVECOMMENT","LOADPOST","VOTE","BASE_URL","process","REACT_APP_BASE_URL","handleError","error","post","editPost","payload","removePost","addComment","comment","postId","removeComment","commentId","vote","sendVoteToAPI","direction","dispatch","a","axios","response","data","console","log","NewPost","add","postData","addPostToApi","uuid","history","push","connect","Comment","handleRemove","deleteCommentFromApi","color","text","CommentList","commentArray","comments","key","listStyleType","CommentForm","PostDetail","visibility","toggleEditForm","handleCancelEdit","handleVote","getPostFromApi","match","params","postid","updatePostFromApi","deletePostFromApi","renderLoading","marginTop","marginLeft","addCommentToApi","mapDispatchToProps","get","put","delete","posts","Title","TitleList","titles","length","getTitlesFromAPI","map","Routes","path","render","rtProps","App","wake","Boolean","window","location","hostname","makeTitleFromPost","sortByVote","sort","b","combineReducers","action","filter","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a349b13.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nclass NavBox extends React.Component {\n  render() {\n    return (\n        <div className=\"jumbotron\">\n        <h1>Microblog</h1>\n        <h3>Get in the rhythm of blogging!</h3>\n\n        <div>\n          <NavLink className=\"nav-item\" style={{ marginRight: \"10px\" }}\n            exact to=\"/\">Home</NavLink>\n          <NavLink className=\"nav-item\" exact to=\"/new\">Add a New Post</NavLink>\n        </div>\n        </div>\n    )\n  }\n}\n\nexport default NavBox;","import React from 'react';\n\nclass PostForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.props.isEditing ? {\n      title: this.props.currentPost.title,\n      description: this.props.currentPost.description,\n      body: this.props.currentPost.body,\n      id: this.props.currentPost.id,\n      votes: this.props.currentPost.votes\n    } : {\n        title: '',\n        description: '',\n        body: '',\n        votes: 0\n      };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.addPost(this.state);\n  }\n\n  handleChange(evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n  }\n\n  handleCancel() {\n    this.props.cancel();\n  }\n\n  async handleEdit(evt) {\n    evt.preventDefault();\n    await this.props.updatePost(this.state.id, this.state);\n  }\n\n  render() {\n    let submit;\n    this.props.isEditing ? submit = this.handleEdit : submit = this.handleSubmit;\n\n    return (\n      <React.Fragment>\n        <div className='col-8' style={{ margin: \"0 auto\" }}>\n          <form onSubmit={submit}>\n            <div className='form-group'>\n              <label htmlFor='title'>Title</label>\n              <input\n                type='text'\n                className='form-control'\n                id='title'\n                placeholder=''\n                name='title'\n                value={this.state.title}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='description'>Description</label>\n              <input\n                type='text'\n                className='form-control'\n                id='description'\n                placeholder=''\n                name='description'\n                value={this.state.description}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='body'>Body</label>\n              <textarea\n                className='form-control'\n                id='body'\n                rows='7'\n                name='body'\n                value={this.state.body}\n                onChange={this.handleChange}\n              ></textarea>\n            </div>\n            <button\n              type='submit'\n              className='btn btn-primary'\n              style={{ marginRight: '10px' }}>\n              Save\n            </button>\n          <button\n            type='button'\n            className='btn btn-secondary'\n            onClick={this.handleCancel}\n          >\n            Cancel\n          </button>\n          </form>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default PostForm;","export const ADDPOST = \"ADDPOST\";\nexport const EDITPOST = \"EDITPOST\";\nexport const REMOVEPOST = \"REMOVEPOST\";\nexport const LOADTITLES = \"LOADTITLES\";\nexport const ADDCOMMENT = \"ADDCOMMENT\";\nexport const REMOVECOMMENT = \"REMOVECOMMENT\";\nexport const LOADPOST = \"LOADPOST\";\nexport const ERROR = \"ERROR\";\nexport const LOADCOMMENTS = \"LOADCOMMENTS\";\nexport const VOTE = \"VOTE\";","import axios from \"axios\";\nimport {\n  ADDPOST,\n  EDITPOST,\n  REMOVEPOST,\n  LOADTITLES,\n  ADDCOMMENT,\n  REMOVECOMMENT,\n  LOADPOST,\n  VOTE\n} from \"./actionTypes\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:5000\";\n\nfunction getTitles(titles) {\n  return {\n    type: LOADTITLES,\n    titles,\n  };\n}\n\nexport function getTitlesFromAPI() {\n  return async function (dispatch) {\n    const response = await axios.get(`${BASE_URL}/api/posts`);\n    return dispatch(getTitles(response.data));\n  };\n}\n\nfunction handleError(error) {\n  return {\n    type: \"ERROR\",\n    error\n  };\n}\n\nexport function addPost(post, id) {\n  return {\n    type: ADDPOST,\n    post,\n    id\n  };\n}\n\nexport function addPostToApi(data, id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.post(`${BASE_URL}/api/posts`, data);\n      dispatch(addPost(response.data, id));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\n\nfunction getPost(post) {\n  return { type: LOADPOST, post };\n}\n\nexport function getPostFromApi(id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.get(`${BASE_URL}/api/posts/${id}`);\n      dispatch(getPost(response.data));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\n\nexport function editPost(id, post) {\n  return {\n    type: EDITPOST,\n    payload: {\n      id,\n      post\n    }\n  };\n}\n\nexport function updatePostFromApi(id, postData) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.put(`${BASE_URL}/api/posts/${id}`, postData);\n      dispatch(editPost(id, response.data))\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  }\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVEPOST,\n    id\n  };\n}\n\nexport function deletePostFromApi(id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.delete(`${BASE_URL}/api/posts/${id}`);\n      dispatch(removePost(id));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  }\n}\n\nexport function addComment(comment, postId) {\n  return {\n    type: ADDCOMMENT,\n    payload: {\n      comment,\n      postId\n    }\n  };\n}\n\nexport function addCommentToApi(postId, comment) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.post(`${BASE_URL}/api/posts/${postId}/comments`, comment);\n      dispatch(addComment(response.data, postId));\n  } catch (error) {\n      dispatch(handleError(error));\n    }\n  }\n}\n\nexport function removeComment(commentId, postId) {\n  return {\n    type: REMOVECOMMENT,\n    payload: {\n      commentId,\n      postId\n    }\n  };\n}\n\nexport function deleteCommentFromApi(commentId, postId) {\n  return async function thunk(dispatch) {\n    try {\n      await axios.delete(`${BASE_URL}/api/posts/${postId}/comments/${commentId}`);\n      dispatch(removeComment(commentId, postId));\n  } catch (error) {\n      dispatch(handleError(error));\n      console.log(\"in error\")\n    }\n  }\n}\n\nexport function vote(postId, votes) {\n  return {\n    type: VOTE,\n    payload: {\n      postId, \n      votes\n    }\n  };\n}\n\nexport function sendVoteToAPI(postId, direction) {\n  return async function thunk(dispatch) {\n    try {\n      const response = await axios.post(`${BASE_URL}/api/posts/${postId}/vote/${direction}`);\n      dispatch(vote(postId, response.data.votes));\n    } catch (error) {\n      dispatch(handleError(error));\n      console.log(\"in error\", error)\n    }\n  };\n}","import { connect } from 'react-redux';\nimport React from 'react';\nimport PostForm from '../Components/PostForm';\nimport { addPost, addPostToApi } from \"../actions\";\nimport uuid from 'uuid/v4';\n\nclass NewPost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.add = this.add.bind(this);\n    this.cancel = this.cancel.bind(this);\n  }\n\n  add(postData) {\n    this.props.addPostToApi(postData, uuid());\n    this.props.history.push('/');\n  }\n\n  cancel() {\n    this.props.history.push('/');\n  }\n\n  render() {\n    return (\n      <PostForm \n        addPost={this.add}\n        cancel={this.cancel}\n      />\n    )\n  }\n}\n\nexport default connect(null, { addPost, addPostToApi })(NewPost);","import React from 'react';\n\nclass Comment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleRemove = this.handleRemove.bind(this);\n  }\n\n  handleRemove(commentId, postId) {\n    this.props.deleteCommentFromApi(commentId, postId);\n  }\n\n  render() {\n    return (\n      <li><i style={{ color: \"red\", marginRight: '10px' }}\n        className='fas fa-times'\n        onClick={() => this.handleRemove(this.props.comment.id, this.props.postId)}></i>\n        {this.props.comment.text}</li>\n    )\n  }\n}\n\nexport default Comment;","import React from 'react';\nimport Comment from './Comment';\n\nclass CommentList extends React.Component {\n  render() {\n    const { currentPost } = this.props;\n    \n    let commentArray = [];\n    for (let comment of currentPost.comments) {\n      commentArray.push(\n        <Comment key={`${currentPost.id}-${comment.id}`}\n          postId={currentPost.id}\n          comment={comment}\n          deleteCommentFromApi={this.props.deleteCommentFromApi}\n        />\n      );\n    }\n\n    return <ul style={{ listStyleType: \"none\" }}>{commentArray}</ul>;\n  }\n}\n\nexport default CommentList;","import React from 'react';\n\nclass CommentForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async handleSubmit(evt) {\n    evt.preventDefault();\n    await this.props.addComment(this.props.postId, this.state);\n    this.setState({ text: '' });\n  }\n\n  handleChange(evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n  }\n\n  render() {\n    return (\n      <form>\n        <div className=\"form-group\">\n          <input type=\"text\" className=\"form-control\" id=\"comment\"\n            placeholder=\"\" name=\"text\" value={this.state.text}\n            onChange={this.handleChange} />\n        </div>\n        <button type=\"button\" className=\"btn btn-primary\" style={{ marginRight: \"10px\" }}\n          onClick={this.handleSubmit}>Save</button>\n      </form>\n    )\n  }\n}\n\nexport default CommentForm;","import React from 'react';\nimport PostForm from './PostForm';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\n\nclass PostDetail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: true\n    }\n    this.toggleEditForm = this.toggleEditForm.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleCancelEdit = this.handleCancelEdit.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleVote = this.handleVote.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.props.getPostFromApi(this.props.match.params.postid);\n  }\n\n  renderLoading() {\n    return <p>Loading...</p>;\n  }\n\n  toggleEditForm() {\n    this.setState({ visibility: !this.state.visibility });\n  }\n\n  async handleEdit(id, post) {\n    await this.props.updatePostFromApi(id, post);\n    this.props.history.push('/');\n  }\n\n  handleCancelEdit() {\n    this.props.history.push('/')\n  }\n\n  async handleRemove(id) {\n    await this.props.deletePostFromApi(id);\n    this.props.history.push('/');\n  }\n\n  handleVote(id, direction) {\n    this.props.sendVoteToAPI(id, direction);\n  }\n\n  render() {\n    let currentPost = this.props.post.post;\n    if (!currentPost) { return this.renderLoading(); }\n    let visibility = this.state.visibility ? \"hidden\" : \"visible\";\n\n    return (\n      <React.Fragment>\n        <div className='col-10' style={{ margin: \"0 auto\" }}>\n          <div className='jumbotron'>\n            <div className='d-flex justify-content-end'>\n              <i\n                style={{ marginRight: \"6px\", color: \"blue\" }}\n                className='flex-end fas fa-edit'\n                onClick={this.toggleEditForm}></i>\n              <i style={{ color: \"red\" }} className='fas fa-times'\n                onClick={() => this.handleRemove(currentPost.id)}></i>\n            </div>\n\n            <div className='d-flex justify-content-end' style={{ marginTop: '10px' }}>\n              {currentPost.votes} votes:\n              <i className='fas fa-thumbs-up'\n                style={{ color: 'green', marginLeft: '10px' }}\n                onClick={() => this.handleVote(currentPost.id, 'up')}\n              ></i>\n              <i className='fas fa-thumbs-down'\n                style={{ color: 'red', marginLeft: '10px' }}\n                onClick={() => this.handleVote(currentPost.id, 'down')}\n              ></i>\n            </div>\n\n            <h1 className='display-6'>{currentPost.title}</h1>\n            <p className='lead'>{currentPost.description}</p>\n            <p>{currentPost.body}</p>\n            <hr className='my-4' />\n            <h1 className='display-6'>Comments</h1>\n            <CommentList currentPost={currentPost} \n            deleteCommentFromApi={this.props.deleteCommentFromApi} />\n            <CommentForm addComment={this.props.addCommentToApi} postId={currentPost.id} />\n          </div>\n        </div>\n        <div style={{ visibility }} className=\"form-div\">\n          <PostForm\n            updatePost={this.handleEdit}\n            isEditing={true}\n            currentPost={currentPost}\n            cancel={this.handleCancelEdit}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default PostDetail;","import PostDetail from '../Components/PostDetail';\nimport { connect } from 'react-redux';\nimport {\n  getPostFromApi,\n  updatePostFromApi,\n  deletePostFromApi, \n  addCommentToApi, \n  deleteCommentFromApi,\n  sendVoteToAPI\n} from '../actions';\n\nfunction mapStateToProps(state) {\n    return {\n      post: state.posts\n    }\n  }\n\nconst mapDispatchToProps = {\n  getPostFromApi,\n  updatePostFromApi,\n  deletePostFromApi, \n  addCommentToApi,\n  deleteCommentFromApi,\n  sendVoteToAPI\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostDetail);","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleVote = this.handleVote.bind(this);\n  }\n\n  handleVote(id, direction) {\n    this.props.handleVote(id, direction);\n  }\n\n  render() {\n    return (\n      <div className='card w-50 title-card' key={this.props.post.id}>\n        <div className='card-body'>\n          <h5 className='card-title'>\n            <Link to={`/${this.props.post.id}`}>{this.props.post.title}</Link>\n          </h5>\n          <p className='card-text'>{this.props.post.description}</p>\n        </div>\n        <div className=\"card-footer\">\n          {this.props.post.votes} votes\n            <i className='fas fa-thumbs-up'\n            style={{ color: 'green', marginLeft: '10px' }}\n            onClick={() => this.handleVote(this.props.post.id, 'up')}\n          ></i>\n          <i className='fas fa-thumbs-down' style={{ color: 'red', marginLeft: '10px' }}\n            onClick={() => this.handleVote(this.props.post.id, 'down')}></i>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Title;","import { connect } from 'react-redux';\nimport React from 'react';\nimport { getTitlesFromAPI, sendVoteToAPI } from '../actions';\nimport Title from '../Components/Title';\nimport './TitleList.css';\n\nclass TitleList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleVote = this.handleVote.bind(this);\n  }\n  componentDidMount() {\n    if (this.props.titles.length === 0) {\n      this.props.getTitlesFromAPI();\n    }\n  }\n\n  handleVote(id, direction) {\n    this.props.sendVoteToAPI(id, direction);\n  }\n\n  render() {\n    if (this.props.titles.length === 0) return <b>Loading</b>;\n\n    return (\n      <div className=\"row\">\n        {this.props.titles.map(post =>\n          <Title key={post.id} post={post} handleVote={this.handleVote} />\n        )}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    titles: state.titles\n  }\n}\n\nconst mapDispatchToProps = {\n  getTitlesFromAPI,\n  sendVoteToAPI\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TitleList);","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport NewPost from '../Containers/NewPost';\nimport PostDetail from '../Containers/PostDetail';\nimport TitleList from '../Containers/TitleList';\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/new\" render={(rtProps) => <NewPost {...rtProps} />} />\n        <Route exact path=\"/:postid\" render={(rtProps) => <PostDetail\n          {...rtProps} />} />\n        <Route exact path=\"/\" render={() => <TitleList />} />\n        <Redirect to=\"/\" />\n      </Switch>\n    )\n  }\n}\n\nexport default Routes;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport NavBox from './Components/NavBox';\nimport Routes from './Components/Routes';\n\nconst BASE_URL = \"https://microblogbackend.herokuapp.com\";\nclass App extends React.Component {\n\n  async componentDidMount() {\n    let wake = await axios.get(`${BASE_URL}/ping`);\n    console.log(wake.data);\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <NavBox />\n        <Routes />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADDPOST,\n  REMOVEPOST,\n  EDITPOST,\n  VOTE,\n  LOADTITLES\n} from \"../actionTypes\";\n\n// need this fn to avoid passing in all details about post\n// into title\n// passing all details into title would be wasteful \n\nfunction makeTitleFromPost(post) {\n  return {\n    id: post.id,\n    title: post.title,\n    description: post.description,\n    votes: post.votes\n  };\n}\n\nfunction sortByVote(posts) {\n  return posts.sort((a, b) => b.votes - a.votes);\n}\nexport default function rootReducer(state = [], action) {\n  switch (action.type) {\n\n    case LOADTITLES:\n      return sortByVote([...action.titles]);\n\n    case ADDPOST:\n      return sortByVote([...state, makeTitleFromPost(action.post)]);\n\n    case EDITPOST:\n      return state.map(\n        title => title.id === action.payload.id ?\n        makeTitleFromPost(action.payload.post) : title);\n\n    case REMOVEPOST:\n      return state.filter(title => title.id !== action.id);\n\n    case VOTE:\n      return sortByVote(state.map(\n        title => title.id === action.payload.postId ?\n          { ...title, votes: action.payload.votes } : title));\n\n    default:\n      return state;\n  }\n}","import posts from './postReducer';\nimport titles from './titleReducer';\nimport { combineReducers } from \"../../node_modules/redux\";\n\nexport default combineReducers({\n  posts,\n  titles,\n});","import {\n  ADDPOST,\n  EDITPOST,\n  ADDCOMMENT,\n  REMOVECOMMENT,\n  LOADPOST,\n  VOTE\n} from \"../actionTypes\";\n\nexport default function rootReducer(state = {}, action) {\n  switch (action.type) {\n\n    case LOADPOST:\n      return { ...state, post: action.post };\n\n    case ADDPOST:\n      return { ...state, [action.id]: { ...action.post, comments: [] } };\n\n    case EDITPOST:\n      return { ...state, [action.payload.id]: action.payload.post };\n\n\n    // don't need to ...state for comments and votes\n    // because state is just the singular post\n    // (below is pseudo code for state)\n    // {post: {id, title, comments, description, votes }}\n\n    case ADDCOMMENT:\n      const { postId } = action.payload;\n\n      // if post doesn't exist or payload postId doesn't match the id of the post, \n      // return state\n      if (!state.post || +postId !== state.post.id) return state;\n\n      let post = { ...state.post };\n\n      // spread out post.comments to not overwrite old comments \n      // with new comment\n      post.comments = [\n        ...post.comments,\n        { ...action.payload.comment }\n      ];\n\n      return {\n        post\n      };\n\n    case REMOVECOMMENT:\n      return {\n        post: {\n          ...state.post, comments: state.post.comments.filter(\n            comment => comment.id !== action.payload.commentId\n          )\n        }\n      }\n\n    case VOTE:\n      return {\n        ...state,\n        post: {\n          ...state.post, votes: action.payload.votes\n        }\n      }\n\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./Reducers/rootReducer\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk'; \n\nconst store = createStore(rootReducer,\n    composeWithDevTools(applyMiddleware(thunk)));\n  \n  ReactDOM.render(\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}