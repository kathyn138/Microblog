{"ast":null,"code":"import _toConsumableArray from\"/Users/kathynguyen/Documents/projects/microblog/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/kathynguyen/Documents/projects/microblog/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{ADDPOST,EDITPOST,ADDCOMMENT,REMOVECOMMENT,LOADPOST,VOTE}from\"../actionTypes\";export default function rootReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case LOADPOST:return _objectSpread({},state,{post:action.post});case ADDPOST:return _objectSpread({},state,_defineProperty({},action.id,_objectSpread({},action.post,{comments:[]})));case EDITPOST:return _objectSpread({},state,_defineProperty({},action.payload.id,action.payload.post));// don't need to ...state for comments and votes\n// because state is just the singular post\n// (below is pseudo code for state)\n// {post: {id, title, comments, description, votes }}\ncase ADDCOMMENT:var postId=action.payload.postId;// if post doesn't exist or payload postId doesn't match the id of the post, \n// return state\nif(!state.post||+postId!==state.post.id)return state;var post=_objectSpread({},state.post);// spread out post.comments to not overwrite old comments \n// with new comment\npost.comments=[].concat(_toConsumableArray(post.comments),[_objectSpread({},action.payload.comment)]);return{post:post};case REMOVECOMMENT:return{post:_objectSpread({},state.post,{comments:state.post.comments.filter(function(comment){return comment.id!==action.payload.commentId;})})};case VOTE:return _objectSpread({},state,{post:_objectSpread({},state.post,{votes:action.payload.votes})});default:return state;}}","map":{"version":3,"sources":["/Users/kathynguyen/Documents/projects/microblog/frontend/src/Reducers/postReducer.js"],"names":["ADDPOST","EDITPOST","ADDCOMMENT","REMOVECOMMENT","LOADPOST","VOTE","rootReducer","state","action","type","post","id","comments","payload","postId","comment","filter","commentId","votes"],"mappings":"onCAAA,OACEA,OADF,CAEEC,QAFF,CAGEC,UAHF,CAIEC,aAJF,CAKEC,QALF,CAMEC,IANF,KAOO,gBAPP,CASA,cAAe,SAASC,CAAAA,WAAT,EAAyC,IAApBC,CAAAA,KAAoB,2DAAZ,EAAY,IAARC,CAAAA,MAAQ,2CACtD,OAAQA,MAAM,CAACC,IAAf,EAEE,IAAKL,CAAAA,QAAL,CACE,wBAAYG,KAAZ,EAAmBG,IAAI,CAAEF,MAAM,CAACE,IAAhC,GAEF,IAAKV,CAAAA,OAAL,CACE,wBAAYO,KAAZ,oBAAoBC,MAAM,CAACG,EAA3B,kBAAqCH,MAAM,CAACE,IAA5C,EAAkDE,QAAQ,CAAE,EAA5D,KAEF,IAAKX,CAAAA,QAAL,CACE,wBAAYM,KAAZ,oBAAoBC,MAAM,CAACK,OAAP,CAAeF,EAAnC,CAAwCH,MAAM,CAACK,OAAP,CAAeH,IAAvD,GAGF;AACA;AACA;AACA;AAEA,IAAKR,CAAAA,UAAL,IACUY,CAAAA,MADV,CACqBN,MAAM,CAACK,OAD5B,CACUC,MADV,CAGE;AACA;AACA,GAAI,CAACP,KAAK,CAACG,IAAP,EAAe,CAACI,MAAD,GAAYP,KAAK,CAACG,IAAN,CAAWC,EAA1C,CAA8C,MAAOJ,CAAAA,KAAP,CAE9C,GAAIG,CAAAA,IAAI,kBAAQH,KAAK,CAACG,IAAd,CAAR,CAEA;AACA;AACAA,IAAI,CAACE,QAAL,8BACKF,IAAI,CAACE,QADV,oBAEOJ,MAAM,CAACK,OAAP,CAAeE,OAFtB,IAKA,MAAO,CACLL,IAAI,CAAJA,IADK,CAAP,CAIF,IAAKP,CAAAA,aAAL,CACE,MAAO,CACLO,IAAI,kBACCH,KAAK,CAACG,IADP,EACaE,QAAQ,CAAEL,KAAK,CAACG,IAAN,CAAWE,QAAX,CAAoBI,MAApB,CACvB,SAAAD,OAAO,QAAIA,CAAAA,OAAO,CAACJ,EAAR,GAAeH,MAAM,CAACK,OAAP,CAAeI,SAAlC,EADgB,CADvB,EADC,CAAP,CAQF,IAAKZ,CAAAA,IAAL,CACE,wBACKE,KADL,EAEEG,IAAI,kBACCH,KAAK,CAACG,IADP,EACaQ,KAAK,CAAEV,MAAM,CAACK,OAAP,CAAeK,KADnC,EAFN,GAOF,QACE,MAAOX,CAAAA,KAAP,CAvDJ,CAyDD","sourcesContent":["import {\n  ADDPOST,\n  EDITPOST,\n  ADDCOMMENT,\n  REMOVECOMMENT,\n  LOADPOST,\n  VOTE\n} from \"../actionTypes\";\n\nexport default function rootReducer(state = {}, action) {\n  switch (action.type) {\n\n    case LOADPOST:\n      return { ...state, post: action.post };\n\n    case ADDPOST:\n      return { ...state, [action.id]: { ...action.post, comments: [] } };\n\n    case EDITPOST:\n      return { ...state, [action.payload.id]: action.payload.post };\n\n\n    // don't need to ...state for comments and votes\n    // because state is just the singular post\n    // (below is pseudo code for state)\n    // {post: {id, title, comments, description, votes }}\n\n    case ADDCOMMENT:\n      const { postId } = action.payload;\n\n      // if post doesn't exist or payload postId doesn't match the id of the post, \n      // return state\n      if (!state.post || +postId !== state.post.id) return state;\n\n      let post = { ...state.post };\n\n      // spread out post.comments to not overwrite old comments \n      // with new comment\n      post.comments = [\n        ...post.comments,\n        { ...action.payload.comment }\n      ];\n\n      return {\n        post\n      };\n\n    case REMOVECOMMENT:\n      return {\n        post: {\n          ...state.post, comments: state.post.comments.filter(\n            comment => comment.id !== action.payload.commentId\n          )\n        }\n      }\n\n    case VOTE:\n      return {\n        ...state,\n        post: {\n          ...state.post, votes: action.payload.votes\n        }\n      }\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}