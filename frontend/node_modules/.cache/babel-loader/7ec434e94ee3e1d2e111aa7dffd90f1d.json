{"ast":null,"code":"import _defineProperty from \"/Users/kathynguyen/Desktop/microblog/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADDPOST, EDITPOST, REMOVEPOST, ADDCOMMENT, REMOVECOMMENT, LOADPOSTS, LOADONEPOST, ERROR, LOADCOMMENTS, VOTE } from \"../actionTypes\";\nimport { all } from \"q\";\nconst INITIAL_STATE = {};\nexport default function rootReducer(state = {}, action) {\n  let p = state[action.postId];\n\n  switch (action.type) {\n    //   case FETCH_POST:\n    //     return { ...state, [action.post.id]: action.post };\n    case ADDPOST:\n      return _objectSpread({}, state, {\n        [action.post.id]: _objectSpread({}, action.post, {\n          comments: []\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/kathynguyen/Desktop/microblog/frontend/src/Reducers/postReducer.js"],"names":["ADDPOST","EDITPOST","REMOVEPOST","ADDCOMMENT","REMOVECOMMENT","LOADPOSTS","LOADONEPOST","ERROR","LOADCOMMENTS","VOTE","all","INITIAL_STATE","rootReducer","state","action","p","postId","type","post","id","comments"],"mappings":";;;;;;AAAA,SACIA,OADJ,EAEIC,QAFJ,EAGIC,UAHJ,EAIIC,UAJJ,EAKIC,aALJ,EAMIC,SANJ,EAOIC,WAPJ,EAQIC,KARJ,EASIC,YATJ,EAUIC,IAVJ,QAWS,gBAXT;AAYE,SAASC,GAAT,QAAoB,GAApB;AAEA,MAAMC,aAAa,GAAG,EAAtB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAG,EAA7B,EAAiCC,MAAjC,EAAyC;AACtD,MAAIC,CAAC,GAAGF,KAAK,CAACC,MAAM,CAACE,MAAR,CAAb;;AAEA,UAAQF,MAAM,CAACG,IAAf;AAEA;AACA;AAEE,SAAKjB,OAAL;AACE,+BAAYa,KAAZ;AAAmB,SAACC,MAAM,CAACI,IAAP,CAAYC,EAAb,qBAAuBL,MAAM,CAACI,IAA9B;AAAoCE,UAAAA,QAAQ,EAAE;AAA9C;AAAnB;;AAEA;AACF,aAAOP,KAAP;AATF;AAWC","sourcesContent":["import {\n    ADDPOST,\n    EDITPOST,\n    REMOVEPOST,\n    ADDCOMMENT,\n    REMOVECOMMENT,\n    LOADPOSTS,\n    LOADONEPOST,\n    ERROR,\n    LOADCOMMENTS,\n    VOTE\n  } from \"../actionTypes\";\n  import { all } from \"q\";\n  \n  const INITIAL_STATE = {};\n\n  export default function rootReducer(state = {}, action) {\n    let p = state[action.postId];\n  \n    switch (action.type) {\n  \n    //   case FETCH_POST:\n    //     return { ...state, [action.post.id]: action.post };\n  \n      case ADDPOST:\n        return { ...state, [action.post.id]: { ...action.post, comments: [] }};\n\n        default:\n      return state;\n  }\n    }"]},"metadata":{},"sourceType":"module"}