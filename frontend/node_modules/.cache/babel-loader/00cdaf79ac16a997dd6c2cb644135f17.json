{"ast":null,"code":"import axios from \"axios\";\nimport { ADDPOST, EDITPOST, REMOVEPOST, LOADTITLES, ADDCOMMENT, REMOVECOMMENT, LOADPOST, LOADCOMMENTS, VOTE } from \"./actionTypes\";\nconst BASE_URL = \"http://localhost:5000\";\n\nfunction getTitles(titles) {\n  return {\n    type: LOADTITLES,\n    titles\n  };\n}\n\nexport function getTitlesFromAPI() {\n  return async function (dispatch) {\n    const response = await axios.get(\"\".concat(BASE_URL, \"/api/posts\"));\n    return dispatch(getTitles(response.data));\n  };\n}\n\nfunction handleError(error) {\n  return {\n    type: \"ERROR\",\n    error\n  };\n}\n\nexport function addPost(post, id) {\n  return {\n    type: ADDPOST,\n    post,\n    id\n  };\n}\nexport function addPostToApi(data, id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.post(\"\".concat(BASE_URL, \"/api/posts\"), data);\n      dispatch(addPost(response.data, id));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\n\nfunction getPost(post) {\n  return {\n    type: LOADPOST,\n    post\n  };\n}\n\nexport function getPostFromApi(id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.get(\"\".concat(BASE_URL, \"/api/posts/\").concat(id));\n      dispatch(getPost(response.data));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\nexport function editPost(id, post) {\n  return {\n    type: EDITPOST,\n    payload: {\n      id,\n      post\n    }\n  };\n}\nexport function updatePostFromApi(id, postData) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.put(\"\".concat(BASE_URL, \"/api/posts/\").concat(id), postData);\n      dispatch(editPost(id, response.data));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\nexport function removePost(id) {\n  return {\n    type: REMOVEPOST,\n    id\n  };\n}\nexport function deletePostFromApi(id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.delete(\"\".concat(BASE_URL, \"/api/posts/\").concat(id));\n      dispatch(removePost(id));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\nexport function addComment(comment, postId) {\n  return {\n    type: ADDCOMMENT,\n    payload: {\n      comment,\n      postId\n    }\n  };\n}\nexport function addCommentToApi(postId, comment) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.post(\"\".concat(BASE_URL, \"/api/posts/\").concat(postId, \"/comments\"), comment);\n      dispatch(addComment(response.data, postId));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n} // function getComments(comments, postId) {\n//   return { type: LOADCOMMENTS, comments, postId };\n// }\n// export function getCommentsFromApi(postId) {\n//   return async function thunk(dispatch) {\n//     try {\n//       let response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments`);\n//       dispatch(getComments(response.data, postId));\n//   } catch (error) {\n//       dispatch(handleError(error));\n//     }\n//   }\n// }\n\nexport function removeComment(commentId, postId) {\n  return {\n    type: REMOVECOMMENT,\n    payload: {\n      commentId,\n      postId\n    }\n  };\n}\nexport function deleteCommentFromApi(commentId, postId) {\n  console.log(\"api\", commentId, postId);\n  return async function thunk(dispatch) {\n    try {\n      await axios.delete(\"\".concat(BASE_URL, \"/api/posts/\").concat(postId, \"/comments/\").concat(commentId));\n      dispatch(removeComment(commentId, postId));\n    } catch (error) {\n      dispatch(handleError(error));\n      console.log(\"in error\");\n    }\n  };\n} // export function vote(postId, votes) {\n//   return {\n//     type: VOTE,\n//     payload: {\n//       postId, \n//       votes\n//     }\n//   };\n// }\n// export function sendVoteToAPI(postId, direction) {\n//   return async function thunk(dispatch) {\n//     try {\n//       const response = await axios.post(`${BASE_URL}/api/posts/${postId}/vote/${direction}`);\n//       dispatch(vote(postId, response.data.votes));\n//     } catch (error) {\n//       dispatch(handleError(error));\n//       console.log(\"in error\")\n//     }\n//   };\n// }","map":{"version":3,"sources":["/Users/kathynguyen/Desktop/microblog/frontend/src/actions.js"],"names":["axios","ADDPOST","EDITPOST","REMOVEPOST","LOADTITLES","ADDCOMMENT","REMOVECOMMENT","LOADPOST","LOADCOMMENTS","VOTE","BASE_URL","getTitles","titles","type","getTitlesFromAPI","dispatch","response","get","data","handleError","error","addPost","post","id","addPostToApi","thunk","getPost","getPostFromApi","editPost","payload","updatePostFromApi","postData","put","removePost","deletePostFromApi","delete","addComment","comment","postId","addCommentToApi","removeComment","commentId","deleteCommentFromApi","console","log"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  ADDPOST,\n  EDITPOST,\n  REMOVEPOST,\n  LOADTITLES,\n  ADDCOMMENT,\n  REMOVECOMMENT,\n  LOADPOST,\n  LOADCOMMENTS,\n  VOTE\n} from \"./actionTypes\";\n\nconst BASE_URL = \"http://localhost:5000\";\n\nfunction getTitles(titles) {\n  return {\n    type: LOADTITLES,\n    titles,\n  };\n}\n\nexport function getTitlesFromAPI() {\n  return async function (dispatch) {\n    const response = await axios.get(`${BASE_URL}/api/posts`);\n    return dispatch(getTitles(response.data));\n  };\n}\n\nfunction handleError(error) {\n  return {\n    type: \"ERROR\",\n    error\n  };\n}\n\nexport function addPost(post, id) {\n  return {\n    type: ADDPOST,\n    post,\n    id\n  };\n}\n\nexport function addPostToApi(data, id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.post(`${BASE_URL}/api/posts`, data);\n      dispatch(addPost(response.data, id));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\n\nfunction getPost(post) {\n  return { type: LOADPOST, post };\n}\n\nexport function getPostFromApi(id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.get(`${BASE_URL}/api/posts/${id}`);\n      dispatch(getPost(response.data));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  };\n}\n\nexport function editPost(id, post) {\n  return {\n    type: EDITPOST,\n    payload: {\n      id,\n      post\n    }\n  };\n}\n\nexport function updatePostFromApi(id, postData) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.put(`${BASE_URL}/api/posts/${id}`, postData);\n      dispatch(editPost(id, response.data))\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  }\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVEPOST,\n    id\n  };\n}\n\n\nexport function deletePostFromApi(id) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.delete(`${BASE_URL}/api/posts/${id}`);\n      dispatch(removePost(id));\n    } catch (error) {\n      dispatch(handleError(error));\n    }\n  }\n}\n\nexport function addComment(comment, postId) {\n  return {\n    type: ADDCOMMENT,\n    payload: {\n      comment,\n      postId\n    }\n  };\n}\n\nexport function addCommentToApi(postId, comment) {\n  return async function thunk(dispatch) {\n    try {\n      let response = await axios.post(`${BASE_URL}/api/posts/${postId}/comments`, comment);\n      dispatch(addComment(response.data, postId));\n  } catch (error) {\n      dispatch(handleError(error));\n    }\n  }\n}\n\n// function getComments(comments, postId) {\n//   return { type: LOADCOMMENTS, comments, postId };\n// }\n\n// export function getCommentsFromApi(postId) {\n//   return async function thunk(dispatch) {\n//     try {\n//       let response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments`);\n//       dispatch(getComments(response.data, postId));\n//   } catch (error) {\n//       dispatch(handleError(error));\n//     }\n//   }\n// }\n\nexport function removeComment(commentId, postId) {\n  return {\n    type: REMOVECOMMENT,\n    payload: {\n      commentId,\n      postId\n    }\n  };\n}\n\nexport function deleteCommentFromApi(commentId, postId) {\n    console.log(\"api\", commentId, postId)\n  return async function thunk(dispatch) {\n    try {\n      await axios.delete(`${BASE_URL}/api/posts/${postId}/comments/${commentId}`);\n      dispatch(removeComment(commentId, postId));\n  } catch (error) {\n      dispatch(handleError(error));\n      console.log(\"in error\")\n    }\n  }\n}\n\n// export function vote(postId, votes) {\n//   return {\n//     type: VOTE,\n//     payload: {\n//       postId, \n//       votes\n//     }\n//   };\n// }\n\n\n// export function sendVoteToAPI(postId, direction) {\n//   return async function thunk(dispatch) {\n//     try {\n//       const response = await axios.post(`${BASE_URL}/api/posts/${postId}/vote/${direction}`);\n//       dispatch(vote(postId, response.data.votes));\n//     } catch (error) {\n//       dispatch(handleError(error));\n//       console.log(\"in error\")\n//     }\n//   };\n// }"]},"metadata":{},"sourceType":"module"}